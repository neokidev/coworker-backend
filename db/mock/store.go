// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ot07/coworker-backend/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/ot07/coworker-backend/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateMember mocks base method.
func (m *MockStore) CreateMember(arg0 context.Context, arg1 db.CreateMemberParams) (db.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", arg0, arg1)
	ret0, _ := ret[0].(db.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMember indicates an expected call of CreateMember.
func (mr *MockStoreMockRecorder) CreateMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockStore)(nil).CreateMember), arg0, arg1)
}

// DeleteMember mocks base method.
func (m *MockStore) DeleteMember(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockStoreMockRecorder) DeleteMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockStore)(nil).DeleteMember), arg0, arg1)
}

// GetMember mocks base method.
func (m *MockStore) GetMember(arg0 context.Context, arg1 uuid.UUID) (db.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMember", arg0, arg1)
	ret0, _ := ret[0].(db.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMember indicates an expected call of GetMember.
func (mr *MockStoreMockRecorder) GetMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMember", reflect.TypeOf((*MockStore)(nil).GetMember), arg0, arg1)
}

// ListMembers mocks base method.
func (m *MockStore) ListMembers(arg0 context.Context, arg1 db.ListMembersParams) ([]db.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", arg0, arg1)
	ret0, _ := ret[0].([]db.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers.
func (mr *MockStoreMockRecorder) ListMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockStore)(nil).ListMembers), arg0, arg1)
}

// UpdateMember mocks base method.
func (m *MockStore) UpdateMember(arg0 context.Context, arg1 db.UpdateMemberParams) (db.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMember", arg0, arg1)
	ret0, _ := ret[0].(db.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMember indicates an expected call of UpdateMember.
func (mr *MockStoreMockRecorder) UpdateMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMember", reflect.TypeOf((*MockStore)(nil).UpdateMember), arg0, arg1)
}
