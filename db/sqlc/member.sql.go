// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: member.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const countMembers = `-- name: CountMembers :one
SELECT count(*) FROM members
`

func (q *Queries) CountMembers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countMembers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMember = `-- name: CreateMember :one
INSERT INTO members (
  id, first_name, last_name, email
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, first_name, last_name, email, created_at
`

type CreateMemberParams struct {
	ID        uuid.UUID      `json:"id"`
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	Email     sql.NullString `json:"email"`
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, createMember,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMember = `-- name: DeleteMember :exec
DELETE FROM members
WHERE id = $1
`

func (q *Queries) DeleteMember(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMember, id)
	return err
}

const deleteMembers = `-- name: DeleteMembers :exec
DELETE FROM members
WHERE id = ANY($1::uuid[])
`

func (q *Queries) DeleteMembers(ctx context.Context, dollar_1 []uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMembers, pq.Array(dollar_1))
	return err
}

const getMember = `-- name: GetMember :one
SELECT id, first_name, last_name, email, created_at FROM members
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMember(ctx context.Context, id uuid.UUID) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMember, id)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const listMembers = `-- name: ListMembers :many
SELECT id, first_name, last_name, email, created_at FROM members
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListMembersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMembers(ctx context.Context, arg ListMembersParams) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, listMembers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Member{}
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const truncateMembersTable = `-- name: TruncateMembersTable :exec
TRUNCATE TABLE members CASCADE
`

func (q *Queries) TruncateMembersTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, truncateMembersTable)
	return err
}

const updateMember = `-- name: UpdateMember :one
UPDATE members
SET
  first_name = COALESCE($2, first_name),
  last_name = COALESCE($3, last_name),
  email = COALESCE($4, email)
WHERE id = $1
RETURNING id, first_name, last_name, email, created_at
`

type UpdateMemberParams struct {
	ID        uuid.UUID      `json:"id"`
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
	Email     sql.NullString `json:"email"`
}

func (q *Queries) UpdateMember(ctx context.Context, arg UpdateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, updateMember,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
